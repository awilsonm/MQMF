% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spm.r
\name{robustSPM}
\alias{robustSPM}
\title{robustSPM conducts a robustness test on the quality of fit of an SPM}
\usage{
robustSPM(inpar, fish, N = 10, scaler = 40, console = TRUE,
  schaefer = TRUE, funk = simpspm, funkone = FALSE)
}
\arguments{
\item{inpar}{the parameter set to begin the trials with}

\item{fish}{the fisheries data: at least year, catch, and cpue}

\item{N}{the number of random trials to run; defaults to 10, which is too few}

\item{scaler}{the divisor that sets the degree of normal random variation to
add to the parameter values; default = 15 the smaller the value the more
variable the outcome}

\item{console}{print summary statistics to the screen? default = TRUE}

\item{schaefer}{default = TRUE, which sets the analysis to the Schaefer
model. setting it to FALSE applies the Fox model instead}

\item{funk}{the function used to generate the predicted cpue}

\item{funkone}{defaults=FALSE; determines whether to use negLL or negLL1
with FALSE robustSPM will use negLL, with TRUE it will use negLL1
which has a constraint on the first parameter to keep it > 0}
}
\value{
a list of results from each run, the range of values across runs, and
    the median values.
}
\description{
robustSPM conducts a robustness test on the quality of fit of
    an SPM. This is done by using the original optimal model parameters or
    the original guessed parameter values, add random variation to each of
    them, and re-fit the model. This process needs to be repeated multiple
    times. This should enable an analysis of the stability of the modelling
    outcomes. If the optimum parameters are used then add more variation, if
    initial guesses are used you may need to select different starting points
    so that the random variation covers the parameter space reasonably well.
}
\examples{
\dontrun{
  data(dataspm)
  fish <- dataspm$fish
  data(dataspm)
  param <- log(c(r=0.24,K=5174,Binit=2846,sigma=0.164))
  ans <- fitSPM(pars=param,fish=fish,schaefer=TRUE,maxiter=1000)
  out <- robustSPM(ans$estimate,fish,N=10,scaler=40,console=TRUE,
                   schaefer=TRUE)
  str(out)
  print(out$results)
} 
}
